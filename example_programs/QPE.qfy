//This is the QPE algorithm file. 
//the source is in https://en.wikipedia.org/wiki/Quantum_phase_estimation_algorithm
//ODO: Alex, I am putting the Simon's algorithm code here, because I think the structure is very similar.
//Please look at the wiki and try to modify the code to be a phase estimation.
//lambda value here is the eigenvalue for U, so you will need to say the eigen value property about U here.

method QPE(q : Q[n], p : Q[n], n:nat, U : [Bool] -> [Bool], lambda : [Bool]) returns (y:nat, p : real)
  requires forall k :: 0 <= k < 2^(n-1) ==> f(n2b(k)) == f(s xor n2b(k+2^n))
  requires b2n(s) != 0
    // we can assume that all elements in the function are lined up with, without losing generality, since we do not rely on the structure
  requires { q[0 , n) : Nor ↦ |0⟩ }
  requires { p[0 , n) : Nor ↦ |0⟩ } // maybe not true?
  //we should have a way of only specifying basis.
  //but we also care about amplitudes here.
  ensures n2b(y) . s == 0 ==>  p == 0
  ensures n2b(y) . s == 1 ==> p == 1 / 2^(n-1)
{
  q[0, n) *= H;
  
  for i in [0, n) with q[i]
    separates q[0, i), p[0, n)
    invariant {
      q[0, i), p[0, n) : En ↦ ∑ k ∈ [0, 2^i)) . 1 / sqrt(2^n) . | k , ∑ j ∈ [0, i) . f(k, p[k]) ⟩
    }
    invariant {
      q [i , n) : Had ↦ |+⟩
    }
  {
    //quantum mod-mult requires gcd(base,N) == 1 to implement, otherwise, it is not implementable.
    p[0, n) *= λ ((x: Q n, y:Q n) => (x, ((y + f(x)))));

    // This is super hacky, but I have no good way to do this now....
    // TODO: find out one way to take the reference of the underlying range
    // e.g. [[ p[0 .. N] ]] ?
    //#LemmaPowEquiv(p_seq'nat'_7__emit, base, i, N);
  }

  q[0,n) *= RQFT;
  //the 1 / sqrt(2^n) * 1 / sqrt(2^n) can be rewritten as 1 / 2^n, but we can keep it in 1 / sqrt(2^n) * 1 / sqrt(2^n) or 1/ (sqrt(2^n) * sqrt(2^n))
  assert { q[0 .. n] : En ↦ ∑ y ∈ [0, 2^n) . 1 / sqrt(2^n) * 1 / sqrt(2^n) . ∑ x ∈ [0 .. 2^n] . ω (x * y, 2) . |y⟩ };
  y,p *= measure(q);
  //we will need the post-analysis leading to the above result set up in https://en.wikipedia.org/wiki/Simon%27s_problem
}  

