// TEST: IfMod
// DESCRIPTION:
//   this test ensures the guard can be split from a large partition and also 
//   checks the basic reasoning of `Pow` and `%`
//

method Shor(q : qreg[10], p : qreg[10], base : nat)
  requires { q [0 .. 10] : had ↦ ⊗ i . (1) }
  requires { p [0 .. 10] : en ↦ ∑ i ∈ [0 .. 1]. (1) }
  ensures { q [0 .. 1], p [0 .. 10] : en ↦ ∑ k ∈ [0 .. 2]. (k, ((Pow(base, k)) % 10)) }
  ensures { q [1 .. 10] : had ↦ ⊗ i . (1) }
{
  if (q[0 .. 1])
    separates p[0 .. 10]
  {
     p[0 .. 10] *= λ (x => ((Pow(base, 1)) * x) % 10);
  }

  assert { q [0..1], p [0..10] : en ↦
    ∑ k ∈ [0 .. 2] . (k, ((Pow(base, k)) % 10))
  };
}  
