// Grover's Search Algorithm
//
// Description: Given a function `f` with only one input mapping to 1, and the
// rest mapping to 0. Find out the corresponding value.
//
// 

method Grovers(q : qreg[n], n:nat, f : nat -> nat, target:nat, N : nat) returns (y:nat, p : real)
  requires N <= Pow2(n)
  requires target < Pow2(n)
  requires { q[0, n] : nor ↦ 0 }
  requires DataFunction(f, Pow2(n), target)
  // ensures N == pi / 4 * sqrt(2^n) ==>  p == 1 // what the heck does this mean?
  // ensures f(n2b(y)) == 1
{
  q[0 .. n] *= H;

  // I don't understand where the `sin(theta)` and the `cos(theta)` thing is
  // from.
  // This part is just ridiculous ...
  assert {
    q[0 .. n] : en
    ↦ 
    forall k ∈ [0 .. Pow2(n)] .
      match f(k) {
        0 => sin(theta) (k),
        1 => cos(theta) (k),
    }
  };

  for i in [0, N)
    invariant {
      q[0 .. n] : En ↦ forall k ∈ [0, 2^n) . (sin (2 * i * theta + theta) : f(k) == 1, cos (2 * i * theta + theta) : f(k) == 0) . |k⟩ 
    }
  {
    //quantum mod-mult requires gcd(base,N) == 1 to implement, otherwise, it is not implementable.
    q[0, n) *= λ (y:Q n => f(y)); //this performs phase kick-back. only allowed operation (read from f and f is a function answers yes or no).
    q[0, n) *= amp; //apply amplitude amplification. Basically for any q as (sin var, cos var) |k⟩, applying amp to it is the following
                   // (sine (2 * theta) cos var - cos (2 * theta) sin var, cos (2*theta) cos var + sin (2 * theta) sin var)
                   //the theta is realted to the sin/cos structures the system formed.
                   //the first phase kick-back term will mark the f(k) == 1 terms, so that the amp will be useful.
                   //the phase kick-back is the so-called reflection.
  }

  y,p *= measure(q);
  // we can see that after a fixed number N interation, the chance p of measuring out q which is a key in f(y) == 1 is sin (2*N * theta + theta).
  // the chance of it to close to 1 will be to make 2*N*theta + theta == pi / 2.
  // so N will be roughly pi / (4*theta) - 1/2, theta can be estimated to be sqrt(m/2^n). N will be N == pi / 4 * sqrt(2^n)
}  

