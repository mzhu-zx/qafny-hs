include "./OraclePredicate.dfy"

method DeutschJozsa(q : qreg[n], p : qreg[1], n : nat, f : nat -> nat) : 
  requires Balanced(f) || Constant(f)
  requires n >= 1
  requires { q[0 .. n] : nor ↦ ⊗ 0 }
  requires { p[0 .. 1] : nor ↦ ⊗ 1 }
  ensures {
    q[0 .. n], p[0 .. 1] : en
      ↦ 
    ∑ i ∈ [0 .. Pow2(n)] . Ω j ∈ [0 .. Pow2(n)] . (f(j) + i * j, 2) ~ ( i, _ )
  }
{
  q[0 .. n] *= H;
  p[0 .. 1] *= H;

  // this oracle + syntax is not yet implemented
  // We can indeed add one special case by casting the left to EN and stay the
  // right one.

  // ah, this is actually an "escape hatch".
  // implement this as a functional entanglement: `map f . liftM2 (,)`
  q[0 .. n], p[0 .. 1] *= λ ((x, y) => (x, ((y + f(x)) % 2)));

  assert {
    q[0 .. n], p[0 .. 1] : en
      ↦
    ∑ i ∈ [0 .. Pow2(n)] . isqrt(Pow2(n)) ~ ω (f(i), 2) ~ ( i, _ )
  };

  // another escape hatch, inspired by Alex here:
  // 
  // the user may explicity downcast `en` to `had`, this will be enforced at the
  // verification time. only if the basis are "saturated", can you perform this
  // cast. I'm not sure if this is fruitful.

  q[0 .. n] *= qft;
  
  assert { q[0 .. n], p[0 .. 1] : en ↦ ∑ i ∈ [0 .. Pow2(n)] . Ω j ∈ [0 .. Pow2(n)] . (f(j) + i * j, 2) ~ ( i, _ ) };
}



method DeutschJozsaMeasurement(q : qreg[n], p : qreg[1], n : nat, f : nat -> nat)
  requires { q[0 .. n], p[0 .. 1] : en ↦ ∑ i ∈ [0 .. Pow2(n)] . Ω j ∈ [0 .. Pow2(n)] . (f(j) + i * j, 2) ~ ( i, _ ) }
{
  k, prob := measure q[0 .. n];

  assert prob(k) == Prob (∑ i ∈ [0 .. Pow2(n)] . Ω j ∈ [0 .. Pow2(n)] . (f(k) + i * k, 2));

  // then specialize `k` to 0 for reasoning ....
}

