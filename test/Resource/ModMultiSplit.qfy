method MultiModFull(q : qreg[10], p : qreg[10], base : nat)
  requires base >= 3
  requires { q [0 .. 10] : had ↦ ⊗ i . (1) }
  requires { p [0 .. 10] : en ↦ ∑ i ∈ [0 .. 1]. (1) }
  ensures { q[0 .. 10], p[0 .. 10] : en ↦
    ∑ k ∈ [0 .. Pow2(10)] . (k, ((Pow(base, k)) % 10))
  }
{
  // This requires a split for it to work! 
  EntangleOne1(q, p, base);
  MultiMod(q, p, base);
}

method EntangleOne1(q : qreg[1], p : qreg[10], base : nat)
  requires { q [0 .. 1] : had ↦ ⊗ i . (1) }
  requires { p [0 .. 10] : en ↦ ∑ i ∈ [0 .. 1]. (1) }
  ensures { q [0 .. 1], p [0 .. 10] : en ↦ ∑ k ∈ [0 .. 2]. (k, ((Pow(base, k)) % 10)) }
{
  if (q[0 .. 1])
    separates p[0 .. 10]
  {
     p[0 .. 10] *= λ (x => ((Pow(base, 1)) * x) % 10);
  }
}

method MultiMod(q : qreg[10], p : qreg[10], base : nat )
  requires base >= 3
  requires { q[1 .. 10] : had ↦ ⊗ i . (1) }
  requires { q[0 .. 1], p[0 .. 10] : en ↦
    ∑ k ∈ [0 .. 2] . (k, ((Pow(base, k)) % 10))
  }
  ensures { q[0 .. 10], p[0 .. 10] : en ↦
    ∑ k ∈ [0 .. Pow2(10)] . (k, ((Pow(base, k)) % 10))
  }
{
  for i in [1 .. 10] with q[i .. i + 1]
    separates q[0 .. i], p[0 .. 10]
    invariant {
      q[0 .. i], p[0 .. 10] : en ↦ ∑ k ∈ [0 .. Pow2(i)] . ( k , ((Pow(base, k)) % 10) )
    }
    invariant {
      q [i .. 10] : had ↦ ⊗ k . (1)
    }   
  {
    p[0 .. 10] *= λ (x => ((Pow(base, Pow2(i))) * x) % 10);

    // This is super hacky, but I have no good way to do this now....
    #LemmaPowEquiv(p_seq'nat'_7__emit, base, i, 10);
  }
}  


#lemma LemmaPowEquiv(s : seq<nat>, a : nat, i : nat, N : nat)
#  requires |s| == Pow2(i) && N >= 2
#  requires forall k | 0 <= k < Pow2(i) :: s[k] == ((Pow(a, Pow2(i)) * (Pow(a, k) % N)) % N)
#  ensures forall k | 0 <= k < Pow2(i) :: s[k] == (Pow(a, (Pow2(i) + k)) % N)
#{ 
#  forall k | 0 <= k < Pow2(i) {
#    calc == {
#      s[k] == ((Pow(a, Pow2(i)) * (Pow(a, k) % N)) % N);
#     { LemmaMulModNoopRightAuto(); } // crush double Ns
#      s[k] == ((Pow(a, Pow2(i)) * Pow(a, k)) % N);
#     { LemmaPowAdds(a, Pow2(i), k); } // crush the add on Power
#     s[k] == (Pow(a, (Pow2(i) + k)) % N);
#    }
#  }
#} 
